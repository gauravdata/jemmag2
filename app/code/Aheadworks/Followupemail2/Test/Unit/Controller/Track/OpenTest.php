<?php
/**
 * Copyright 2019 aheadWorks. All rights reserved.
 * See LICENSE.txt for license details.
 */

namespace Aheadworks\Followupemail2\Test\Unit\Controller\Track;

use Aheadworks\Followupemail2\Controller\Track\Open;
use Aheadworks\Followupemail2\Api\StatisticsManagementInterface;
use Aheadworks\Followupemail2\Model\Statistics\EmailTracker\Encryptor as EmailTrackerEncryptor;
use Magento\Framework\TestFramework\Unit\Helper\ObjectManager;
use Magento\Framework\App\Action\Context;
use Magento\Framework\Controller\Result\RedirectFactory;
use Magento\Framework\Controller\Result\Redirect;
use Magento\Framework\App\RequestInterface;
use Magento\Framework\View\Asset\Repository as AssetRepository;

/**
 * Test for \Aheadworks\Followupemail2\Test\Unit\Controller\Track\Open
 */
class OpenTest extends \PHPUnit\Framework\TestCase
{
    /**
     * @var Open
     */
    private $controller;

    /**
     * @var Context|\PHPUnit_Framework_MockObject_MockObject
     */
    private $contextMock;

    /**
     * @var StatisticsManagementInterface|\PHPUnit_Framework_MockObject_MockObject
     */
    private $statisticsManagementMock;

    /**
     * @var EmailTrackerEncryptor|\PHPUnit_Framework_MockObject_MockObject
     */
    private $emailTrackerEncryptorMock;

    /**
     * @var RequestInterface|\PHPUnit_Framework_MockObject_MockObject
     */
    private $requestMock;

    /**
     * @var RedirectFactory|\PHPUnit_Framework_MockObject_MockObject
     */
    private $resultRedirectFactoryMock;

    /**
     * @var AssetRepository|\PHPUnit_Framework_MockObject_MockObject
     */
    private $assetRepositoryMock;

    /**
     * Init mocks for tests
     *
     * @return void
     */
    public function setUp()
    {
        $objectManager = new ObjectManager($this);

        $this->requestMock = $this->getMockBuilder(RequestInterface::class)
            ->getMockForAbstractClass();

        $this->resultRedirectFactoryMock = $this->getMockBuilder(RedirectFactory::class)
            ->setMethods(['create'])
            ->disableOriginalConstructor()
            ->getMock();

        $this->contextMock = $objectManager->getObject(
            Context::class,
            [
                'request' => $this->requestMock,
                'resultRedirectFactory' => $this->resultRedirectFactoryMock
            ]
        );

        $this->statisticsManagementMock = $this->getMockBuilder(StatisticsManagementInterface::class)
            ->getMockForAbstractClass();

        $this->emailTrackerEncryptorMock = $this->getMockBuilder(EmailTrackerEncryptor::class)
            ->setMethods(['decrypt'])
            ->disableOriginalConstructor()
            ->getMock();

        $this->assetRepositoryMock = $this->getMockBuilder(AssetRepository::class)
            ->setMethods(['getUrl'])
            ->disableOriginalConstructor()
            ->getMock();

        $this->controller = $objectManager->getObject(
            Open::class,
            [
                'context' => $this->contextMock,
                'statisticsManagement' => $this->statisticsManagementMock,
                'emailTrackerEncryptor' => $this->emailTrackerEncryptorMock,
                'assetRepository' => $this->assetRepositoryMock
            ]
        );
    }

    /**
     * Test execute method
     */
    public function testExecute()
    {
        $params = 'K3joCAvXO3BxzIWYNF3rhn5xQjHMsRF8';
        $decryptedParams = [
            'stat_id'   => 123,
            'email'     => 'test@example.com'
        ];
        $imageName = 'image.gif';
        $imageUrl = 'http://example.com/pub/static/frontend/Magento/luma/en_US/image.gif';

        $resultRedirectMock = $this->getMockBuilder(Redirect::class)
            ->setMethods(['setUrl'])
            ->disableOriginalConstructor()
            ->getMock();
        $this->resultRedirectFactoryMock->expects($this->once())
            ->method('create')
            ->willReturn($resultRedirectMock);

        $this->requestMock->expects($this->once())
            ->method('getParam')
            ->with('params')
            ->willReturn($params);

        $this->emailTrackerEncryptorMock->expects($this->once())
            ->method('decrypt')
            ->with($params)
            ->willReturn($decryptedParams);

        $this->statisticsManagementMock->expects($this->once())
            ->method('addOpened')
            ->with($decryptedParams['stat_id'], $decryptedParams['email'])
            ->willReturn(true);

        $this->assetRepositoryMock->expects($this->once())
            ->method('getUrl')
            ->willReturn($imageUrl);

        $resultRedirectMock->expects($this->once())
            ->method('setUrl')
            ->with($imageUrl)
            ->willReturnSelf();

        $this->assertSame($resultRedirectMock, $this->controller->execute());
    }

    /**
     * Test execute method when no params specified
     */
    public function testExecuteNoParams()
    {
        $resultRedirectMock = $this->getMockBuilder(Redirect::class)
            ->setMethods(['setRefererOrBaseUrl'])
            ->disableOriginalConstructor()
            ->getMock();
        $this->resultRedirectFactoryMock->expects($this->once())
            ->method('create')
            ->willReturn($resultRedirectMock);

        $this->requestMock->expects($this->once())
            ->method('getParam')
            ->with('params')
            ->willReturn(null);

        $resultRedirectMock->expects($this->once())
            ->method('setRefererOrBaseUrl')
            ->willReturnSelf();

        $this->assertSame($resultRedirectMock, $this->controller->execute());
    }
}
